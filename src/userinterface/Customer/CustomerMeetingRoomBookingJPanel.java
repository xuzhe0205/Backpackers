/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Customer;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Hotel;
import Business.Network.Network;
import Business.Organization.CustomerOrganization;
import Business.Organization.HotelOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HotelWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chenweikai
 */
public class CustomerMeetingRoomBookingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerMeetingRoomBookingJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount userAccount;
    private CustomerOrganization customerOrganization;
    ArrayList<Hotel> hotelList; 
    public CustomerMeetingRoomBookingJPanel(JPanel userProcessContainer, UserAccount account, CustomerOrganization customerOrganization, EcoSystem system, ArrayList<Hotel> hotelList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.customerOrganization = customerOrganization;
        this.system = system;
        this.hotelList = hotelList;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHotelSearch = new javax.swing.JTable();
        btnReserve = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("HOTEL BOOKING SEARCH RESULT");

        tableHotelSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Hotel ID", "Hotel Name", "Meeting Room", "Meeting Room Type", "Available"
            }
        ));
        jScrollPane1.setViewportView(tableHotelSearch);

        btnReserve.setText("Apply Reservation!");
        btnReserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReserveActionPerformed(evt);
            }
        });

        backBtn.setText("<<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("MEETING ROOM BOOKING SEARCH RESULT");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Customer/huiyishi.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Airliner/order-add.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(31, 31, 31)
                .addComponent(btnReserve)
                .addGap(53, 53, 53))
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReserve)
                    .addComponent(backBtn)
                    .addComponent(jLabel4))
                .addContainerGap(48, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnReserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReserveActionPerformed
        // TODO add your handling code here:
        
        
        int row = tableHotelSearch.getSelectedRow();
        if (row<0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Hotel myHotel = (Hotel)tableHotelSearch.getValueAt(row, 0);
        if (!myHotel.getIsAvailable()){
            JOptionPane.showMessageDialog(null, "This Meeting room is not available", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        HotelWorkRequest rentRequest = new HotelWorkRequest();
        rentRequest.setMessage("I want to book this MEETING ROOM");
        rentRequest.setSender(userAccount);
        rentRequest.setOrderHotel(myHotel);
        //rentRequest.setCusCredits(userAccount.getCredits());
        rentRequest.setStatus("Applied");

        UserAccount ua = null;

        System.out.println(system.getName()+"////////////");
        for (Network network : system.getNetworkList()){
            System.out.println(system.getNetworkList().size());
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){

                if (enterprise.getName().equals(customerOrganization.getEnterpriseName())){

                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){

                        if (organization instanceof HotelOrganization){

                            for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()){
                                //System.out.println("u,employeename: "+ u.getEmployee().getName()+"hotelcompanyname"+myHotel.getCompanyName());
                                if (u.getEmployee().getName().equals(myHotel.getName())){
                                    ua = u;
                                    break;
                                }
                            }
                        }
                    }
                }

            }
        }
        if (ua != null){
            double m = myHotel.getMeetingroomnumbers() - 1;
            //System.out.println(m);
            myHotel.setMeetingroomnumbers(m);
            rentRequest.setReceiver(ua);
            rentRequest.setIsCancellation(false);
            ua.getWorkQueue().getWorkRequestList().add(rentRequest);
           if (!userAccount.getWorkQueue().getRequestMap().containsKey("Hotel")){
                ArrayList<WorkRequest> hotelRequestList = new ArrayList<WorkRequest>();
                hotelRequestList.add(rentRequest);
                userAccount.getWorkQueue().getRequestMap().put("Hotel", hotelRequestList);
                
            }
            else{
                userAccount.getWorkQueue().getRequestMap().get("Hotel").add(rentRequest);
            }
            userAccount.getCustomerBooking().add(myHotel);
        }

        //System.out.println("Search Result panel: " + userAccount.getCustomerOrder().size());
        JOptionPane.showMessageDialog(null, "Your meeting room booking application has been sent! ", "Warning", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnReserveActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    
    public void populateTable(){
        int rowCount = tableHotelSearch.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tableHotelSearch.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        
        for(Hotel myHotel : hotelList) {
            
            Object row[] = new Object[5];
            row[0] = myHotel;
            row[1] = myHotel.getName();
            row[2] = myHotel.getMeetingroomnumbers();
            row[3] = myHotel.getMeetingroomtype();
            
            
            if (myHotel.getIsAvailable()){
                row[4] = "Yes";
            }
            else{
                row[4] = "No";
            }
            model.addRow(row);
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnReserve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableHotelSearch;
    // End of variables declaration//GEN-END:variables
}
