/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Customer;

import Business.EcoSystem;
import Business.Organization.CustomerOrganization;
import Business.RailWay;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.RailWayOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RailWayWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chenweikai
 */

public class CustomerRailWaySearchResultJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CsutomerRailWaySearchResultJPanel
     */ 
    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount userAccount;
    private CustomerOrganization customerOrganization;
    ArrayList<RailWay> railwayList;
    public CustomerRailWaySearchResultJPanel(JPanel userProcessContainer, UserAccount account, CustomerOrganization customerOrganization, EcoSystem system, ArrayList<RailWay> railwayList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.customerOrganization = customerOrganization;
        this.system = system;
        this.railwayList = railwayList;
        populateTable();
        labelCredits.setText(Double.toString(userAccount.getCredits()));
        reserverooms.setEnabled(false);
        for (Network network : system.getNetworkList()){
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                if ((enterprise.getEnterpriseType().getValue()).equals("Industrial Travel Agency")){
                    if (this.customerOrganization.getEnterpriseName().equals(enterprise.toString())){
                        reserverooms.setEnabled(true);
                    }
                }
                
           
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableRailWaySearch = new javax.swing.JTable();
        btnCredApply = new javax.swing.JButton();
        btnReserve = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        reserverooms = new javax.swing.JButton();
        labelCredits = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        tableRailWaySearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RailWay ID", "RailWay Number", "Date", "Departure", "Arrival", "SeatType", "Price", "Seat Available", "Available"
            }
        ));
        jScrollPane1.setViewportView(tableRailWaySearch);

        btnCredApply.setText("Apply with Credits!");
        btnCredApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCredApplyActionPerformed(evt);
            }
        });

        btnReserve.setText("Apply Reservation!");
        btnReserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReserveActionPerformed(evt);
            }
        });

        backBtn.setText("<<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("RAILWAY BOOKING SEARCH RESULT");

        reserverooms.setText("Reserve Rooms");
        reserverooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveroomsActionPerformed(evt);
            }
        });

        labelCredits.setText("Display Credits");

        jLabel2.setText("Your credits: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(reserverooms, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCredApply, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReserve))))))
                .addContainerGap(240, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(labelCredits)
                .addGap(105, 105, 105))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(labelCredits))
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReserve)
                        .addGap(45, 45, 45)
                        .addComponent(btnCredApply))
                    .addComponent(backBtn))
                .addGap(27, 27, 27)
                .addComponent(reserverooms)
                .addContainerGap(112, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

     public void populateTable(){
        int rowCount = tableRailWaySearch.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tableRailWaySearch.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        
         for(RailWay myRailway : railwayList) {
             if(myRailway.getSeatAvail()>0){
                 myRailway.setIsAvailable(true);
             }
             else{
                 myRailway.setIsAvailable(false);
             }
         }
        
        for(RailWay myRailway : railwayList) {
            
            Object row[] = new Object[89];
            row[0] = myRailway;
            row[1] = myRailway.getRailwayNum();
            row[2] = myRailway.getDate();
            row[3] = myRailway.getDeparture();
            row[4] = myRailway.getArrival();
            row[5] = myRailway.getSeatType();
            row[6] = myRailway.getPrice();
            row[7] = myRailway.getSeatAvail();
            if (myRailway.getIsAvailable()){
                row[8] = "Yes";
            }
            else{
                row[8] = "No";
            }
            model.addRow(row);
            
        }
    }
    
    private void btnCredApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCredApplyActionPerformed
        // TODO add your handling code here:
        int row = tableRailWaySearch.getSelectedRow();
        if (row<0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        RailWay myRailway = (RailWay)tableRailWaySearch.getValueAt(row, 0);
        if (!myRailway.getIsAvailable()){
            JOptionPane.showMessageDialog(null, "This Railway is not available", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        RailWayWorkRequest railwayRequest = new RailWayWorkRequest();
        railwayRequest.setMessage("I want to book this railway");
        railwayRequest.setSender(userAccount);
        railwayRequest.setIsCredits(true);
        railwayRequest.setOrderRailWay(myRailway);
        //rentRequest.setCusCredits(userAccount.getCredits());
        railwayRequest.setStatus("Applied");

        UserAccount ua = null;
        
        for (Network network : system.getNetworkList()){
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){

                if (enterprise.getName().equals(customerOrganization.getEnterpriseName())){
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if (organization instanceof RailWayOrganization){
                            for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()){
                                //System.out.println("u,employeename: "+ u.getEmployee().getName()+"hotelcompanyname"+myRailway.getCompanyName()); 
                                if (u.getEmployee().getName().equals(myRailway.getCompanyName())){
                                    ua = u;
                                    break;
                                }
                            }
                        }
                    }
                }

            }
        }
        if (ua != null){
            double m = myRailway.getSeatAvail();
            if(m > 0){
                
            m = m-1; 
            myRailway.setSeatAvail(m);
            railwayRequest.setReceiver(ua);
            railwayRequest.setIsCancellation(false);
            ua.getWorkQueue().getWorkRequestList().add(railwayRequest);
             if (!userAccount.getWorkQueue().getRequestMap().containsKey("RailWay")){
                ArrayList<WorkRequest> railwayRequestList = new ArrayList<WorkRequest>();
                railwayRequestList.add(railwayRequest);
                userAccount.getWorkQueue().getRequestMap().put("RailWay", railwayRequestList);
                
            }
            else{
                userAccount.getWorkQueue().getRequestMap().get("RailWay").add(railwayRequest);
            }
            userAccount.getCustomerRailWayBooking().add(myRailway);
        

        System.out.println("Search Result panel: " + userAccount.getCustomerRailWayBooking().size());
         System.out.println("Railway seacrch:"+userAccount.getWorkQueue().getWorkRequestList());
        JOptionPane.showMessageDialog(null, "Your RailWay booking application has been sent! Go to 'Your orders' to check your order status :)", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }
            else{
                JOptionPane.showMessageDialog(null, "The rooms are full", "Warning", JOptionPane.INFORMATION_MESSAGE);
            myRailway.setIsAvailable(false);
            }
        }
        
        populateTable();
    }//GEN-LAST:event_btnCredApplyActionPerformed

    private void btnReserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReserveActionPerformed
        // TODO add your handling code here:
        int row = tableRailWaySearch.getSelectedRow();
        if (row<0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
      RailWay myRailWay = (RailWay)tableRailWaySearch.getValueAt(row, 0);
        if (!myRailWay.getIsAvailable()){
            JOptionPane.showMessageDialog(null, "This railway is not available", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
       RailWayWorkRequest rentRequest = new RailWayWorkRequest();
        rentRequest.setMessage("I want to book this railway");
        rentRequest.setSender(userAccount);
        rentRequest.setOrderRailWay(myRailWay);
        //rentRequest.setCusCredits(userAccount.getCredits());
        rentRequest.setStatus("Applied");

        UserAccount ua = null;
       
        for (Network network : system.getNetworkList()){
            System.out.println(system.getNetworkList().size());
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                
                if (enterprise.getName().equals(customerOrganization.getEnterpriseName())){
                     
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                         
                        if (organization instanceof RailWayOrganization){
                            ; 
                            for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()){
                                 System.out.println("u,employeename: "+ u.getEmployee().getName()+"hotelcompanyname"+myRailWay.getCompanyName()); 
                                if (u.getEmployee().getName().equals(myRailWay.getCompanyName())){
                                    ua = u;
                                    break;
                                }
                            }
                        }
                    }
                }

            }
        }
        if (ua != null){
            double m = myRailWay.getSeatAvail();
            if(m > 0){
                
            m = m-1; 
            myRailWay.setSeatAvail(m);
            rentRequest.setReceiver(ua);
            rentRequest.setIsCancellation(false);
            ua.getWorkQueue().getWorkRequestList().add(rentRequest);
             if (!userAccount.getWorkQueue().getRequestMap().containsKey("RailWay")){
                ArrayList<WorkRequest> railwayRequestList = new ArrayList<WorkRequest>();
                railwayRequestList.add(rentRequest);
                userAccount.getWorkQueue().getRequestMap().put("RailWay", railwayRequestList);
                
            }
            else{
                userAccount.getWorkQueue().getRequestMap().get("RailWay").add(rentRequest);
            }
            userAccount.getCustomerRailWayBooking().add(myRailWay);
        

        System.out.println("Search Result panel: " + userAccount.getCustomerRailWayBooking().size());
         System.out.println("Railway seacrch:"+userAccount.getWorkQueue().getWorkRequestList());
        JOptionPane.showMessageDialog(null, "Your RailWay booking application has been sent! Go to 'Your orders' to check your order status :)", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }
            else{
                JOptionPane.showMessageDialog(null, "The railway is full", "Warning", JOptionPane.INFORMATION_MESSAGE);
            myRailWay.setIsAvailable(false);
            }
    }
        populateTable();
    }//GEN-LAST:event_btnReserveActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void reserveroomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveroomsActionPerformed
        // TODO add your handling code here:

        
        for(Network network:system.getNetworkList()){
            //Step 2.a: check against each enterprise
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){
                if (enterprise.getEnterpriseType().getValue().equals("Industrial Travel Agency")){
                    reserverooms.setEnabled(true);
                    CustomerTrainRoomBookingJPanel cushotelTrainRoomBookingJP = new CustomerTrainRoomBookingJPanel(userProcessContainer, userAccount, customerOrganization, system, railwayList);
                    userProcessContainer.add("CustomerTrainMeetingRoomBookingJPanel",cushotelTrainRoomBookingJP);
                    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                }
            }
        }
    }//GEN-LAST:event_reserveroomsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnCredApply;
    private javax.swing.JButton btnReserve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCredits;
    private javax.swing.JButton reserverooms;
    private javax.swing.JTable tableRailWaySearch;
    // End of variables declaration//GEN-END:variables
}
