/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Customer;
import Business.EcoSystem;
import Business.Organization.CustomerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.CarDirectory;
import Business.Flight;
import java.awt.CardLayout;
import javax.swing.JPanel;
import Business.UserAccount.UserAccount;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.*;
import Business.WorkQueue.*;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Oliver
 */
public class CustomerAirFlightHistoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerAirFlightHistoryJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount userAccount;
    private CustomerOrganization customerOrganization;
    String[] seatArr = {"A","B","C","D","E","F"};
    public CustomerAirFlightHistoryJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.system = business;
        this.customerOrganization = (CustomerOrganization)organization;
        populateTable();
        labelCredits.setText(Double.toString(userAccount.getCredits()));
    }

    public void populateTable(){
        
        int rowCount = tableOrderHistory.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tableOrderHistory.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        System.out.println("orderhistory: " + userAccount.getFlightOrder().size() + ", work request: " + userAccount.getWorkQueue().getRequestMap().get("Airliner").size());
        int cnt = 0;
        if (userAccount.getFlightOrder().size() == 0){
            return;
        }
        
        //System.out.println("History panel: " + userAccount.getCustomerOrder().size());
        for (WorkRequest request : userAccount.getWorkQueue().getRequestMap().get("Airliner")){
            Object row[] = new Object[9];

            row[0] = userAccount.getFlightOrder().get(cnt).getAirlinerName();
            row[1] = userAccount.getFlightOrder().get(cnt);
            row[2] = userAccount.getFlightOrder().get(cnt).getDate();
            row[3] = userAccount.getFlightOrder().get(cnt).getDeparture();
            row[4] = userAccount.getFlightOrder().get(cnt).getArrival();
            UserAccount[][] seats = userAccount.getFlightOrder().get(cnt).getFlightSeats();
            for(int i = 0; i < 25; i++){
                for (int j = 0; j < 6; j++){
                    if (seats[i][j] != null){
                        if (seats[i][j].getId().equals(userAccount.getId())){
                            String seatStr;
                            //Just convert seat format from: "1A" to "01A"
                            if (i+1 < 10){
                                seatStr = ("0"+Integer.toString(i+1))+seatArr[j];
                            }
                            else{
                                seatStr = (Integer.toString(i+1))+seatArr[j];
                            }
                            row[5] = seatStr;
                        }
                    }

                }
            }
            if (request.getPriceChange()){
                row[6] = request.getPrice();
            }
            else{
                row[6] = userAccount.getFlightOrder().get(cnt).getPrice();
            }
            row[7] = request.getMessage();
            row[8] = request.getStatus();

            model.addRow(row);
            cnt++;
        }
            
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrderHistory = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        labelCredits = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("CUSTOMER AIR-TRAVEL HISTORY");

        tableOrderHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Airliner", "Flight Number", "Date", "Departure", "Arrival", "Seat", "Price", "Airliner Message", "Status"
            }
        ));
        jScrollPane1.setViewportView(tableOrderHistory);

        backBtn.setText("<<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        btnCancel.setText("Request to Cancel >>>");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setText("Your credits: ");

        labelCredits.setText("Display Credits");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Airliner/feiji.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Airliner/quxiao.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(jLabel3)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel1)
                        .addGap(140, 140, 140)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(labelCredits))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addGap(563, 563, 563)
                                .addComponent(jLabel4)
                                .addGap(26, 26, 26)
                                .addComponent(btnCancel)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(labelCredits)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel3)))
                .addGap(75, 75, 75)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(backBtn)
                        .addComponent(btnCancel))
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int row = tableOrderHistory.getSelectedRow();
        if (row<0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Flight myFlight = (Flight)tableOrderHistory.getValueAt(row, 1);
        AirlinerWorkRequest airRequest = new AirlinerWorkRequest();
        airRequest.setOrderFlight(myFlight);
        System.out.println(myFlight);
        airRequest.setIsCancellation(true);
        airRequest.setPrice((Double)tableOrderHistory.getValueAt(row, 6));
        airRequest.setMessage("I want to canel order");
        airRequest.setSender(userAccount);
        UserAccount ua = null;
        for (Network network : system.getNetworkList()){
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                if (enterprise.getName().equals(customerOrganization.getEnterpriseName())){
                    //System.out.println("CusHis: " + enterprise.getName() + "cusOrg: " + customerOrganization.getEnterpriseName());
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if (organization instanceof AirlinerOrganization){
                            for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()){
                                if (u.getEmployee().getName().equals(myFlight.getAirlinerName())){
                                    System.out.println("passed");
                                    ua = u;
                                    break;
                                }
                            }
                        }
                    }
                }

            }
        }
        if (ua != null){
            airRequest.setRow(row);
            airRequest.setReceiver(ua);
            airRequest.setStatus("Requested");
            airRequest.setIsCancellation(true);
            ua.getWorkQueue().getWorkRequestList().add(airRequest);
            userAccount.getWorkQueue().getRequestMap().get("Airliner").get(row).setStatus("Cancellation Requested");
        }
        populateTable();
        JOptionPane.showMessageDialog(null, "Your cancellation request has been sent!", "Warning", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCredits;
    private javax.swing.JTable tableOrderHistory;
    // End of variables declaration//GEN-END:variables
}
