/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Customer;
import Business.EcoSystem;
import Business.Organization.CustomerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.CarDirectory;
import Business.Car;
import java.awt.CardLayout;
import javax.swing.JPanel;
import Business.UserAccount.UserAccount;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import Business.WorkQueue.CarRentalWorkRequest;
import Business.WorkQueue.WorkRequest;
/**
 *
 * @author Oliver
 */
public class CustomerCarSearchResultJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerCarSearchResultJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount userAccount;
    private CustomerOrganization customerOrganization;
    ArrayList<Car> carList;
    public CustomerCarSearchResultJPanel(JPanel userProcessContainer, UserAccount account, CustomerOrganization customerOrganization, EcoSystem system, ArrayList<Car> carList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.customerOrganization = customerOrganization;
        this.system = system;
        this.carList = carList;
        populateTable();
        //System.out.println(customerOrganization.getEnterpriseName());
        labelCredits.setText(Double.toString(userAccount.getCredits()));
    }
    
    public void populateTable(){
        int rowCount = tableCarSearch.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tableCarSearch.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        
        for(Car myCar : carList) {
            
            Object row[] = new Object[10];
            row[0] = myCar;
            row[1] = myCar.getLocation();
            row[2] = myCar.getCompanyName();
            row[3] = myCar.getCarType();
            row[4] = myCar.getCarClass();
            row[5] = myCar.getMade() + " " + myCar.getModel();
            row[6] = myCar.getColor();
            row[7] = myCar.getCapacity();
            row[8] = myCar.getPrice();
            if (myCar.getIsAvailable()){
                row[9] = "Yes";
            }
            else{
                row[9] = "No";
            }
            model.addRow(row);
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableCarSearch = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnReserve = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        btnCredApply = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        labelCredits = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        tableCarSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Car ID", "Pick-up Location", "Company", "Vehicle Type", "Vehicle Class", "Made&Model", "Color", "Passenger Cap.", "Price", "Availability"
            }
        ));
        jScrollPane1.setViewportView(tableCarSearch);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("RENTAL CAR SEARCH RESULT");

        btnReserve.setText("Apply Reservation!");
        btnReserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReserveActionPerformed(evt);
            }
        });

        backBtn.setText("<<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        btnCredApply.setText("Apply with Credits!");
        btnCredApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCredApplyActionPerformed(evt);
            }
        });

        jLabel2.setText("Your credits: ");

        labelCredits.setText("Display Credits");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/AdministrativeRole/qiche.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Airliner/order-add.png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Airliner/jifen.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(jLabel3)
                        .addGap(73, 73, 73)
                        .addComponent(jLabel1)
                        .addGap(92, 92, 92)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(labelCredits))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(backBtn)
                        .addGap(335, 335, 335)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCredApply)
                            .addComponent(btnReserve))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(labelCredits)
                    .addComponent(jLabel3))
                .addGap(63, 63, 63)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReserve)
                    .addComponent(backBtn)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCredApply)
                    .addComponent(jLabel5))
                .addContainerGap(331, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnReserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReserveActionPerformed
        // TODO add your handling code here:
        int row = tableCarSearch.getSelectedRow();
        if (row<0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Car myCar = (Car)tableCarSearch.getValueAt(row, 0);
        if (!myCar.getIsAvailable()){
            JOptionPane.showMessageDialog(null, "This vehicle is not available", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        CarRentalWorkRequest rentRequest = new CarRentalWorkRequest();
        rentRequest.setOrderCar(myCar);
        rentRequest.setMessage("I want to rent this vehicle");
        rentRequest.setSender(userAccount);
        //rentRequest.setCusCredits(userAccount.getCredits());
        rentRequest.setStatus("Applied");
        
        UserAccount ua = null;
         for (Network network : system.getNetworkList()){
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                
                if (enterprise.getName().equals(customerOrganization.getEnterpriseName())){
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if (organization instanceof CarRentalOrganization){
                            for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()){
                                if (u.getEmployee().getName().equals(myCar.getCompanyName())){
                                    ua = u;
                                    break;
                                }
                            }
                        }
                    }
                }
                
            }
         }
        if (ua != null){
            
            rentRequest.setReceiver(ua);
            rentRequest.setIsCancellation(false);
            ua.getWorkQueue().getWorkRequestList().add(rentRequest);
            if (!userAccount.getWorkQueue().getRequestMap().containsKey("CarRental")){
                ArrayList<WorkRequest> rentRequestList = new ArrayList<WorkRequest>();
                rentRequestList.add(rentRequest);
                userAccount.getWorkQueue().getRequestMap().put("CarRental", rentRequestList);
                
            }
            else{
                userAccount.getWorkQueue().getRequestMap().get("CarRental").add(rentRequest);
            }
            userAccount.getCustomerOrder().add(myCar);
        }
         
        
        //System.out.println("Search Result panel: " + userAccount.getCustomerOrder().size());
        JOptionPane.showMessageDialog(null, "Your rental car application has been sent! Go to 'Your orders' to check your order status :)", "Warning", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnReserveActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void btnCredApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCredApplyActionPerformed
        // TODO add your handling code here:
        int row = tableCarSearch.getSelectedRow();
        if (row<0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Car myCar = (Car)tableCarSearch.getValueAt(row, 0);
        if (!myCar.getIsAvailable()){
            JOptionPane.showMessageDialog(null, "This vehicle is not available", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        CarRentalWorkRequest rentRequest = new CarRentalWorkRequest();
        rentRequest.setMessage("I want to rent this vehicle");
        rentRequest.setOrderCar(myCar);
        rentRequest.setSender(userAccount);
        rentRequest.setIsCredits(true);
        //rentRequest.setCusCredits(userAccount.getCredits());
        rentRequest.setStatus("Applied");
        
        UserAccount ua = null;
         for (Network network : system.getNetworkList()){
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                
                if (enterprise.getName().equals(customerOrganization.getEnterpriseName())){
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if (organization instanceof CarRentalOrganization){
                            for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()){
                                if (u.getEmployee().getName().equals(myCar.getCompanyName())){
                                    ua = u;
                                    break;
                                }
                            }
                        }
                    }
                }
                
            }
         }
        if (ua != null){
            
            rentRequest.setReceiver(ua);
            rentRequest.setIsCancellation(false);
            ua.getWorkQueue().getWorkRequestList().add(rentRequest);
            if (!userAccount.getWorkQueue().getRequestMap().containsKey("CarRental")){
                ArrayList<WorkRequest> rentRequestList = new ArrayList<WorkRequest>();
                rentRequestList.add(rentRequest);
                userAccount.getWorkQueue().getRequestMap().put("CarRental", rentRequestList);
                
            }
            else{
                userAccount.getWorkQueue().getRequestMap().get("CarRental").add(rentRequest);
            }
            userAccount.getCustomerOrder().add(myCar);
        }
         
        
        //System.out.println("Search Result panel: " + userAccount.getCustomerOrder().size());
        JOptionPane.showMessageDialog(null, "Your rental car application has been sent! Go to 'Your orders' to check your order status :)", "Warning", JOptionPane.INFORMATION_MESSAGE); 
    }//GEN-LAST:event_btnCredApplyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnCredApply;
    private javax.swing.JButton btnReserve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCredits;
    private javax.swing.JTable tableCarSearch;
    // End of variables declaration//GEN-END:variables
}
